git clone -b develop git@git.rikkei.org:d8/summit/tokubai/batch/ms-all.git

checkout ra branch mới: git checkout -b ms-toku-tenpo-group
commit code mới lên: git add .
tạo merged request vào branch develop: git checkout <branch_name>
git status
git push origin <branch_name>

nhờ dev merged hộ
chạy terraform


git add > commit > push
commit 
push
pull
rebase
restore

git branch 
git pull origin develop -> update code mới về local

git config --global user.name 'abc'
git config --global user.mail 'abc@gmail.com'

git init : khởi tạo repo dưới local

git checkout -b develop : tạo nhánh mới có tên develop

git add 'filename' -> add từng file
git add. -> add tất cả 
git commit -m 'msg'

git remote add origin 
git push origin 
git branch -d tên_nhánh -> xóa 1 nhánh
git checkout -b tên nhánh -> tạo 1 nhánh mới và chuyển sang nhánh đó
git checkout tên_nhánh -> chuyển nhánh 
git branch -> xem danh sách tên nhánh
git pull origin develop

git pull origin main --allow-unrelated-histories


Code Repository:

Sử dụng dịch vụ AWS CodeCommit để lưu trữ và quản lý mã nguồn của dự án.
Hoặc kết nối với các dịch vụ Git khác như GitHub, Bitbucket.

Build:

Sử dụng AWS CodeBuild để tự động xây dựng dự án của bạn.
CodeBuild cung cấp môi trường xây dựng được quản lý, cho phép bạn tự động hóa các tác vụ như biên dịch, đóng gói và kiểm tra chất lượng.

Test:

Sử dụng AWS CodePipeline để tạo một đường ống CI/CD.
Thêm một giai đoạn kiểm thử vào đường ống.
Sử dụng các dịch vụ như AWS Device Farm để kiểm thử trên thiết bị thực hoặc AWS Lambda để thực hiện kiểm thử đơn vị.

Deploy:

Sử dụng AWS CodeDeploy để triển khai ứng dụng của bạn lên các môi trường khác nhau (ví dụ: development, staging, production).
CodeDeploy có thể tự động triển khai ứng dụng của bạn lên các máy chủ EC2, AWS Lambda, hoặc các dịch vụ khác.

Monitor:

Sử dụng Amazon CloudWatch để giám sát hiệu suất và trạng thái của ứng dụng của bạn.
CloudWatch cung cấp các biểu đồ, báo cáo và cảnh báo để giúp bạn theo dõi các chỉ số quan trọng.

git status
git commit -m " "
git push origin master


git fetch origin master
git merge origin master

git fetch origin master:tmp
git rebase tmp
git push origin HEAD:master
git branch -D tmp

- tạo và checkout branch mới: git checkout -b "tên branch"

Quy trình làm việc với Git (Git Workflow)
Git workflow là một tập hợp các quy tắc và quy trình mà một đội nhóm tuân theo khi làm việc với Git để quản lý mã nguồn. Một workflow hiệu quả giúp duy trì sự nhất quán, tránh xung đột mã và tối ưu hóa việc cộng tác.

1. Các thành phần cốt lõi của Git Workflow
Để hiểu về quy trình làm việc, trước hết cần nắm rõ 4 trạng thái của tệp tin trong Git:

Working Directory (Vùng làm việc): Đây là nơi bạn chỉnh sửa, thêm, xóa các tệp tin. Các thay đổi ở đây chưa được Git theo dõi.

Staging Area (Vùng dàn dựng): Là nơi bạn "dàn dựng" các thay đổi đã chọn để chuẩn bị cho một commit. Lệnh git add sẽ đưa các thay đổi từ Working Directory vào Staging Area.

Local Repository (Kho lưu trữ cục bộ): Là cơ sở dữ liệu của Git trên máy tính của bạn, nơi lưu trữ tất cả các commit. Lệnh git commit sẽ tạo một "bức ảnh chụp nhanh" (snapshot) của Staging Area và lưu vào Local Repository.

Remote Repository (Kho lưu trữ từ xa): Là một kho lưu trữ được chia sẻ trên mạng (ví dụ: GitHub, GitLab, Bitbucket), nơi cả đội có thể truy cập. Lệnh git push sẽ gửi các commit từ Local Repository lên Remote Repository.

2. Quy trình làm việc cơ bản (The Basic Git Workflow)
Đây là quy trình làm việc từng bước mà bạn thực hiện hàng ngày để lưu lại các thay đổi của mình.

Chỉnh sửa tệp tin: Bạn thực hiện các thay đổi cần thiết trong Working Directory.

Đưa các thay đổi vào Staging Area: Bạn sử dụng lệnh git add để chọn những thay đổi mà bạn muốn đưa vào commit tiếp theo.

# Đưa một tệp cụ thể vào Staging Area
git add file.txt

# Đưa tất cả các thay đổi vào Staging Area
git add .

Thực hiện Commit: Bạn tạo một commit với một thông điệp ý nghĩa, lưu lại một "bức ảnh chụp nhanh" của Staging Area vào Local Repository.

git commit -m "Thêm tính năng đăng nhập bằng email"

Đẩy Commit lên Remote Repository: Bạn gửi các commit từ Local Repository lên Remote Repository để chia sẻ với cả đội.

# Đẩy commit lên branch hiện tại trên remote
git push origin main

Cập nhật từ Remote Repository: Để đảm bảo code của bạn luôn được đồng bộ với các thành viên khác, bạn cần thường xuyên kéo các thay đổi mới nhất về.

# Kéo các thay đổi mới nhất từ remote
git pull origin main

3. Các mô hình Git Workflow phổ biến
Các mô hình này được xây dựng dựa trên quy trình cơ bản, nhưng bổ sung thêm các quy tắc về cách sử dụng nhánh (branching) để quản lý mã nguồn một cách có tổ chức hơn.

a. GitFlow Workflow
GitFlow là một mô hình phức tạp và có cấu trúc chặt chẽ, rất phù hợp cho các dự án lớn có nhiều phiên bản (releases) và hỗ trợ dài hạn.

Các nhánh chính:

main (hoặc master): Chứa mã nguồn ổn định, đã được triển khai (deployed).

develop: Chứa mã nguồn mới nhất cho phiên bản tiếp theo.

Các nhánh hỗ trợ:

feature/: Nhánh được tạo từ develop để phát triển một tính năng mới. Sau khi hoàn thành, nó sẽ được gộp (merge) lại vào develop.

release/: Nhánh được tạo từ develop để chuẩn bị cho một phiên bản mới. Tại đây, bạn chỉ thực hiện sửa lỗi nhỏ (bug fixes). Sau đó, nó được gộp vào cả main và develop.

hotfix/: Nhánh được tạo từ main để sửa lỗi khẩn cấp trên bản sản phẩm. Sau khi sửa xong, nó được gộp vào cả main và develop.

b. GitHub Flow
GitHub Flow là một mô hình đơn giản hơn nhiều so với GitFlow, tập trung vào việc triển khai liên tục (Continuous Deployment).

Các nguyên tắc chính:

Luôn có một nhánh chính duy nhất: main. Nhánh này phải luôn sẵn sàng để triển khai.

Mọi tính năng mới, sửa lỗi đều được phát triển trên các nhánh riêng biệt, được tạo từ main.

Đặt tên nhánh miêu tả tính năng (ví dụ: add-user-authentication).

Sử dụng Pull Request (PR) để thảo luận và xem xét mã trước khi gộp vào main.

Sau khi PR được chấp thuận và gộp vào main, nó sẽ được triển khai ngay lập tức.

c. GitLab Flow
GitLab Flow là một mô hình nằm giữa GitFlow và GitHub Flow. Nó kết hợp sự đơn giản của GitHub Flow với các nhánh chuyên dụng cho môi trường (staging, production).

Các nguyên tắc chính:

Có một nhánh chính (main) giống như GitHub Flow.

Sử dụng các nhánh tính năng (feature/) để phát triển, sau đó gộp vào main.

Có thể có các nhánh chuyên biệt cho môi trường, ví dụ: staging, production, để quản lý việc triển khai. Mã được gộp từ main vào staging, rồi từ staging vào production.
